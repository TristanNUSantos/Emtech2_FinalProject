# -*- coding: utf-8 -*-
"""Final Exam: Model Deployment in the Cloud

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1swwy0rGVCtCseVEkmM1mlZxUpjj0BuH1

# Final Exam: Model Deployment in the Cloud

Members: <br>
Espiritu, Missy Anne Jhelzshir G. <br>
Santos, Uneta Tristanneal <br>
Course&Section: CPE 019 - CPE32S9 <br>
Date: May 18, 2024 <br>
Instructor: Engr. Roman Richard <br>

## **IMPORTING MODULES:**
"""

from google.colab import drive
drive.mount('/content/drive')

import time
import cv2
from PIL import Image, ImageOps
import numpy as np
import sys
from matplotlib import pyplot
import pandas as pd
from numpy import mean, std, argmax
from matplotlib import pyplot as plt
from sklearn.model_selection import KFold
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential, load_model
from keras.layers import Dropout, BatchNormalization, Conv2D, MaxPooling2D, Dense, Flatten
from keras.optimizers import SGD
from keras.utils import to_categorical
from keras.utils import load_img, img_to_array
import os
import streamlit as st

# Load the trained fashion classification model
@st.cache(allow_output_mutation=True)
def load_fashion_model():
    model = load_model('/content/saved_fashion.h5')
    return model

# Function to preprocess and make predictions on uploaded images
def predict_fashion(image_data, model):
    size = (64, 64)
    image = ImageOps.fit(image_data, size, Image.ANTIALIAS)
    img = np.asarray(image)
    img_reshape = img[np.newaxis, ...]
    prediction = model.predict(img_reshape)
    return prediction

def main():
    st.write("""
    # Fashion Classification
    """)

    file = st.file_uploader("Choose a clothing photo from your computer", type=["jpg", "png"])

    if file is not None:
        model = load_fashion_model()
        image = Image.open(file)
        st.image(image, caption='Uploaded Image.', use_column_width=True)
        prediction = predict_fashion(image, model)
        st.write("Prediction:", prediction)

if __name__ == "__main__":
    main()
